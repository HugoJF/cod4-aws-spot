AWSTemplateFormatVersion: "2010-09-09"
Description: COD4 Spot Price Server via Docker / ECS
Parameters:

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your COD4 server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus COD4 container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
      - Running
      - Stopped

  InstanceType:
    Type: String
    Description: "t3.medium is a good cost effective instance, 1 VCPU and 3.75 GB of RAM with moderate network performance. Change at your discretion. https://aws.amazon.com/ec2/instance-types/."
    Default: t3.medium

  SpotPrice:
    Type: String
    Description: "A t3.medium shouldn't cost more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.05"

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv4:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv6:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your COD4 instance starts, supply the hosted zone ID here.
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your COD4 instance starts, supply the name of the record here (e.g. cod4.mydomain.com).
    Default: ''

  MinecraftVersion:
    Type: String
    Description: Server minecraft version
    Default: ''

  Timezone:
    Type: String
    Description: "Change the server's timezone. Use the canonical name of the format: Area/Location (e.g. America/New_York)"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Essential Configuration
        Parameters:
          - ServerState
          - InstanceType
          - SpotPrice
      - Label:
          default: Optional Server Settings
        Parameters:
          - MinecraftVersion
          - Timezone
      - Label:
          default: Optional Remote Access (SSH) Configuration
        Parameters:
          - KeyPairName
          - YourIPv4
          - YourIPv6
      - Label:
          default: Optional DNS Configuration
        Parameters:
          - HostedZoneId
          - RecordName
    ParameterLabels:
      ServerState:
        default: "Update this parameter to shut down / start up your COD4 server as required to save on cost. Takes a few minutes to take effect."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      MinecraftVersion:
        default: "Minecraft version ie 1.16.3"
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIPv4:
        default: "If you wish to access the instance via SSH and using IPv4, provide it."
      YourIPv6:
        default: "If you wish to access the instance via SSH and using IPv6, provide it."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your COD4 instance starts, supply the hosted zone ID here."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your COD4 instance starts, supply a record name here (e.g. minecraft.mydomain.com)."
      Timezone:
        default: "The server's timezone"

Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IPv4AddressProvided: !Not [ !Equals [ !Ref YourIPv4, '' ] ]
  IPv6AddressProvided: !Not [ !Equals [ !Ref YourIPv6, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]

Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: { }

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ====================================================
  # EFS FOR PERSISTENT DATA
  # ====================================================

  Efs:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED

  MountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
        - !Ref EfsSg
      SubnetId: !Ref SubnetA

  MountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
        - !Ref EfsSg
      SubnetId: !Ref SubnetB

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
        - FromPort: 2049
          ToPort: 2049
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG
  # ====================================================

  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
        - !If
          - IPv4AddressProvided
          - FromPort: 22
            ToPort: 22
            IpProtocol: tcp
            CidrIp: !Sub "${YourIPv4}/32"
          - !Ref 'AWS::NoValue'
        - !If
          - IPv6AddressProvided
          - FromPort: 22
            ToPort: 22
            IpProtocol: tcp
            CidrIpv6: !Sub "${YourIPv6}/128"
          - !Ref 'AWS::NoValue'
        - FromPort: 28960
          ToPort: 28960
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 28960
          ToPort: 28960
          IpProtocol: udp
          CidrIp: 0.0.0.0/0
        - FromPort: 8000
          ToPort: 8000
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
        - !Ref Ec2Sg
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum install -y amazon-efs-utils
          echo "options nfs enable_ino64=0" > /etc/modprobe.d/nfs.conf
          echo "N" | tee /sys/modules/nfs/parameters/enable_ino64 || true
          mkdir /opt/cod4
          mount -t efs ${Efs}:/ /opt/cod4
          chown 1000:1000 /opt/cod4

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MountA
      - MountB
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  StackUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies: # TODO this is not needed anymore (no dashboards)
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # Used to pass role when calling CreateLaunchConfiguration
                Action:
                  - iam:PassRole
                  - iam:GetRole
                Resource: !GetAtt InstanceRole.Arn
              - Effect: Allow # Used to resolve EC2 AMI
                Action:
                  - ec2:DescribeImages
                Resource: "*"
              - Effect: Allow # Used to resolve a few variables in the template
                Action:
                  - ssm:GetParameters
                Resource: arn:aws:ssm:*::parameter/aws*
              - Effect: Allow # Used to update the ECS service DesiredCount
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: !Ref EcsService
              - Effect: Allow # Used to update AutoScaling DesiredCapacity
                Action:
                  - autoscaling:UpdateAutoScalingGroup
                Resource: !Sub arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroup}
              - Effect: Allow # Used to removing the existing LaunchConfiguration (not sure why it's needed)
                Action:
                  - autoscaling:DeleteLaunchConfiguration
                Resource: !Sub arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/${LaunchConfiguration}
              - Effect: Allow # Used to create a new LaunchConfiguration, needs to be every resource since we cannot predict the LogicalID (not sure why it's needed)
                Action:
                  - autoscaling:CreateLaunchConfiguration
                Resource: "*"
              - Effect: Allow # Used to update AutoScaling
                Action:
                  - autoscaling:DescribeLaunchConfigurations
                Resource: "*"

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:*"
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service"
      TaskDefinition: !Ref EcsTask
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: cod4-main
          Host:
            SourcePath: /opt/cod4/main
        - Name: cod4-zone
          Host:
            SourcePath: /opt/cod4/zone
        - Name: cod4-mods
          Host:
            SourcePath: /opt/cod4/mods
        - Name: cod4-usermaps
          Host:
            SourcePath: /opt/cod4/usermaps
      ContainerDefinitions:
        - Name: cod4
          MemoryReservation: 768 # TODO: check
          Image: qmcgaw/cod4 # TODO update image
          Command:
            - "+set dedicated 2"
            #- "+set nep_ip 15.228.98.239" # TODO attempt to set this to elastic ip
            - "+set net_port 28960"
            - "+set sv_punkbuster 1"
            - "+set fs_game mods/pml220_denerd_rev3"
            - "+exec server.cfg"
            - "+set rcon_password potato123"
            - "+map_rotate"
          PortMappings:
            - ContainerPort: 28960
              HostPort: 28960
              Protocol: tcp
            - ContainerPort: 28960
              HostPort: 28960
              Protocol: udp
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          MountPoints:
            - ContainerPath: /home/user/cod4/main
              SourceVolume: cod4-main
            - ContainerPath: /home/user/cod4/zone
              SourceVolume: cod4-zone
            - ContainerPath: /home/user/cod4/mods
              SourceVolume: cod4-mods
            - ContainerPath: /home/user/cod4/usermaps
              SourceVolume: cod4-usermaps
              ReadOnly: true

  # ====================================================
  # SET DNS RECORD
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties:
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          RecordName: !Ref RecordName
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': 'updating',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': os.environ['RecordName'],
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record for COD4
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
            - !Ref AutoScalingGroup
      Name: !Sub "${AWS::StackName}-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn

Outputs:
  CheckInstanceIp:
    Description: To find your COD4 instance IP address, visit the following link. Click on the instance to find its Public IP address.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:tag:aws:autoscaling:groupName=${AutoScalingGroup};sort=tag:Name"
